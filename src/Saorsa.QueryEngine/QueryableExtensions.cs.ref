using System.Linq.Expressions;
using Saorsa.QueryEngine.Model;

namespace Saorsa.QueryEngine;

public static class QueryableExtensions
{
    public static IOrderedQueryable<TEntity> OrderBy<TEntity>(
        this IQueryable<TEntity> source,
        string propertyName)
    {
        var parameter = Expression.Parameter(typeof(TEntity), "type");
        var propertyExpression = Expression.Property(parameter, propertyName);

        if (propertyExpression.Type != typeof(AutocompleteResponseModel))
            return propertyExpression.Type.IsEnumerable()
        //IsEnumerable(propertyExpression.Type.FullName)
                ? source.OrderBy(propertyExpression.ToCountExpression<TEntity>(parameter))
                : source.OrderBy( QueryEngine.ToLambda<TEntity>(propertyName));
        var property = parameter.AggregateNestedProperty(
            $"{propertyName}.{nameof(AutocompleteResponseModel.Key)}");
        return source.OrderBy(Expression.Lambda<Func<TEntity, object>>(
            property,
            parameter));
    }
    
    public static IOrderedQueryable<TEntity> OrderByDescending<TEntity>(
        this IQueryable<TEntity> source,
        string propertyName)
    {
        var parameter = Expression.Parameter(typeof(TEntity), "type");
        var propertyExpression = Expression.Property(parameter, propertyName);

        if (propertyExpression.Type != typeof(AutocompleteResponseModel))
            return propertyExpression.Type.IsEnumerable()
                //IsEnumerable(propertyExpression.Type.FullName)
                ? source.OrderByDescending(propertyExpression.ToCountExpression<TEntity>(parameter))
                : source.OrderByDescending( QueryEngine.ToLambda<TEntity>(propertyName));
        var property = parameter.AggregateNestedProperty(
            $"{propertyName}.{nameof(AutocompleteResponseModel.Key)}");
        return source.OrderByDescending(Expression.Lambda<Func<TEntity, object>>(
            property,
            parameter));
    }

    
    public static IQueryable<T> SearchDT<T>(
        this IQueryable<T> source,
        string? searchTerm,
        IEnumerable<DTColumn>? columns = null)
    {
        if (string.IsNullOrEmpty(searchTerm)) return source;
        Expression expression = default!;
        var parameter = Expression.Parameter(typeof(T), "type");

        foreach (var (column, index) in columns.Where(c => !string.IsNullOrEmpty(c.Data)
                                                                  && c.Searchable)
                     .Select((value, i) => (value, i)))
        {
            var member =  parameter.AggregateNestedProperty(column.Data!);

            if (member.Type == typeof(AutocompleteResponseModel))
            {
                var property = parameter.AggregateNestedProperty($"{column.Data}.Key");
                expression = GetSearchExpression(index, filter.Search.Value, expression, property);
            }
            else
            {
                if (member.Type.Name != "String")
                {
                    continue;
                }
                expression = GetSearchExpression(index, filter.Search.Value, expression, member);
            }
        }

        return expression != null ? source.Where(Expression.Lambda<Func<T, bool>>(expression, parameter)) : source;
    }
}
